"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * whatsapp-bridge Node Api
 * The whatsapp-bridge API description
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionsApi = exports.SessionsApiFactory = exports.SessionsApiFp = exports.SessionsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SessionsApi - axios parameter creator
 * @export
 */
const SessionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} sessionUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: (sessionUuid_1, ...args_1) => __awaiter(this, [sessionUuid_1, ...args_1], void 0, function* (sessionUuid, options = {}) {
            // verify required parameter 'sessionUuid' is not null or undefined
            if (sessionUuid === null || sessionUuid === undefined) {
                throw new base_1.RequiredError('sessionUuid', 'Required parameter sessionUuid was null or undefined when calling getSession.');
            }
            const localVarPath = `/api/sessions/{sessionUuid}`
                .replace(`{${"sessionUuid"}}`, encodeURIComponent(String(sessionUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} branchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: (branchId_1, ...args_1) => __awaiter(this, [branchId_1, ...args_1], void 0, function* (branchId, options = {}) {
            // verify required parameter 'branchId' is not null or undefined
            if (branchId === null || branchId === undefined) {
                throw new base_1.RequiredError('branchId', 'Required parameter branchId was null or undefined when calling getSessions.');
            }
            const localVarPath = `/api/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (branchId !== undefined) {
                localVarQueryParameter['branchId'] = branchId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SessionsApiAxiosParamCreator = SessionsApiAxiosParamCreator;
/**
 * SessionsApi - functional programming interface
 * @export
 */
const SessionsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} sessionUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(sessionUuid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.SessionsApiAxiosParamCreator)(configuration).getSession(sessionUuid, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {number} branchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions(branchId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.SessionsApiAxiosParamCreator)(configuration).getSessions(branchId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
exports.SessionsApiFp = SessionsApiFp;
/**
 * SessionsApi - factory interface
 * @export
 */
const SessionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} sessionUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(sessionUuid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                return (0, exports.SessionsApiFp)(configuration).getSession(sessionUuid, options).then((request) => request(axios, basePath));
            });
        },
        /**
         *
         * @param {number} branchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions(branchId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                return (0, exports.SessionsApiFp)(configuration).getSessions(branchId, options).then((request) => request(axios, basePath));
            });
        },
    };
};
exports.SessionsApiFactory = SessionsApiFactory;
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
class SessionsApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} sessionUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSession(sessionUuid, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, exports.SessionsApiFp)(this.configuration).getSession(sessionUuid, options).then((request) => request(this.axios, this.basePath));
        });
    }
    /**
     *
     * @param {number} branchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSessions(branchId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, exports.SessionsApiFp)(this.configuration).getSessions(branchId, options).then((request) => request(this.axios, this.basePath));
        });
    }
}
exports.SessionsApi = SessionsApi;
